// Generated by gencpp from file simple_cpp_service/SimpleServiceRequest.msg
// DO NOT EDIT!


#ifndef SIMPLE_CPP_SERVICE_MESSAGE_SIMPLESERVICEREQUEST_H
#define SIMPLE_CPP_SERVICE_MESSAGE_SIMPLESERVICEREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace simple_cpp_service
{
template <class ContainerAllocator>
struct SimpleServiceRequest_
{
  typedef SimpleServiceRequest_<ContainerAllocator> Type;

  SimpleServiceRequest_()
    : current_robot_angle(0.0)
    , angle()
    , clock()
    , trash()
    , distance()  {
    }
  SimpleServiceRequest_(const ContainerAllocator& _alloc)
    : current_robot_angle(0.0)
    , angle(_alloc)
    , clock(_alloc)
    , trash(_alloc)
    , distance(_alloc)  {
  (void)_alloc;
    }



   typedef double _current_robot_angle_type;
  _current_robot_angle_type current_robot_angle;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _angle_type;
  _angle_type angle;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _clock_type;
  _clock_type clock;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _trash_type;
  _trash_type trash;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _distance_type;
  _distance_type distance;





  typedef boost::shared_ptr< ::simple_cpp_service::SimpleServiceRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::simple_cpp_service::SimpleServiceRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SimpleServiceRequest_

typedef ::simple_cpp_service::SimpleServiceRequest_<std::allocator<void> > SimpleServiceRequest;

typedef boost::shared_ptr< ::simple_cpp_service::SimpleServiceRequest > SimpleServiceRequestPtr;
typedef boost::shared_ptr< ::simple_cpp_service::SimpleServiceRequest const> SimpleServiceRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::simple_cpp_service::SimpleServiceRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::simple_cpp_service::SimpleServiceRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::simple_cpp_service::SimpleServiceRequest_<ContainerAllocator1> & lhs, const ::simple_cpp_service::SimpleServiceRequest_<ContainerAllocator2> & rhs)
{
  return lhs.current_robot_angle == rhs.current_robot_angle &&
    lhs.angle == rhs.angle &&
    lhs.clock == rhs.clock &&
    lhs.trash == rhs.trash &&
    lhs.distance == rhs.distance;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::simple_cpp_service::SimpleServiceRequest_<ContainerAllocator1> & lhs, const ::simple_cpp_service::SimpleServiceRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace simple_cpp_service

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::simple_cpp_service::SimpleServiceRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::simple_cpp_service::SimpleServiceRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::simple_cpp_service::SimpleServiceRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::simple_cpp_service::SimpleServiceRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::simple_cpp_service::SimpleServiceRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::simple_cpp_service::SimpleServiceRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::simple_cpp_service::SimpleServiceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "905d956f9b5c13f30da2c466d1309410";
  }

  static const char* value(const ::simple_cpp_service::SimpleServiceRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x905d956f9b5c13f3ULL;
  static const uint64_t static_value2 = 0x0da2c466d1309410ULL;
};

template<class ContainerAllocator>
struct DataType< ::simple_cpp_service::SimpleServiceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "simple_cpp_service/SimpleServiceRequest";
  }

  static const char* value(const ::simple_cpp_service::SimpleServiceRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::simple_cpp_service::SimpleServiceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 current_robot_angle\n"
"float64[] angle\n"
"float64[] clock\n"
"float64[] trash\n"
"float64[] distance\n"
;
  }

  static const char* value(const ::simple_cpp_service::SimpleServiceRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::simple_cpp_service::SimpleServiceRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.current_robot_angle);
      stream.next(m.angle);
      stream.next(m.clock);
      stream.next(m.trash);
      stream.next(m.distance);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SimpleServiceRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::simple_cpp_service::SimpleServiceRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::simple_cpp_service::SimpleServiceRequest_<ContainerAllocator>& v)
  {
    s << indent << "current_robot_angle: ";
    Printer<double>::stream(s, indent + "  ", v.current_robot_angle);
    s << indent << "angle[]" << std::endl;
    for (size_t i = 0; i < v.angle.size(); ++i)
    {
      s << indent << "  angle[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.angle[i]);
    }
    s << indent << "clock[]" << std::endl;
    for (size_t i = 0; i < v.clock.size(); ++i)
    {
      s << indent << "  clock[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.clock[i]);
    }
    s << indent << "trash[]" << std::endl;
    for (size_t i = 0; i < v.trash.size(); ++i)
    {
      s << indent << "  trash[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.trash[i]);
    }
    s << indent << "distance[]" << std::endl;
    for (size_t i = 0; i < v.distance.size(); ++i)
    {
      s << indent << "  distance[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.distance[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SIMPLE_CPP_SERVICE_MESSAGE_SIMPLESERVICEREQUEST_H
